// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/entities/user.go
//
// Generated by this command:
//
//	mockgen -source=./internal/entities/user.go -destination=mocks/mock_entities.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	entities "gophermart.ru/internal/entities"
)

// MockUserManagment is a mock of UserManagment interface.
type MockUserManagment struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagmentMockRecorder
	isgomock struct{}
}

// MockUserManagmentMockRecorder is the mock recorder for MockUserManagment.
type MockUserManagmentMockRecorder struct {
	mock *MockUserManagment
}

// NewMockUserManagment creates a new mock instance.
func NewMockUserManagment(ctrl *gomock.Controller) *MockUserManagment {
	mock := &MockUserManagment{ctrl: ctrl}
	mock.recorder = &MockUserManagmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManagment) EXPECT() *MockUserManagmentMockRecorder {
	return m.recorder
}

// InsertUser mocks base method.
func (m *MockUserManagment) InsertUser(arg0 entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserManagmentMockRecorder) InsertUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserManagment)(nil).InsertUser), arg0)
}

// User mocks base method.
func (m *MockUserManagment) User(login string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", login)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserManagmentMockRecorder) User(login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserManagment)(nil).User), login)
}

// MockOrdersManagment is a mock of OrdersManagment interface.
type MockOrdersManagment struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersManagmentMockRecorder
	isgomock struct{}
}

// MockOrdersManagmentMockRecorder is the mock recorder for MockOrdersManagment.
type MockOrdersManagmentMockRecorder struct {
	mock *MockOrdersManagment
}

// NewMockOrdersManagment creates a new mock instance.
func NewMockOrdersManagment(ctrl *gomock.Controller) *MockOrdersManagment {
	mock := &MockOrdersManagment{ctrl: ctrl}
	mock.recorder = &MockOrdersManagmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersManagment) EXPECT() *MockOrdersManagmentMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrdersManagment) AddOrder(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdersManagmentMockRecorder) AddOrder(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrdersManagment)(nil).AddOrder), order)
}

// Order mocks base method.
func (m *MockOrdersManagment) Order(number string) (*entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", number)
	ret0, _ := ret[0].(*entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Order indicates an expected call of Order.
func (mr *MockOrdersManagmentMockRecorder) Order(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockOrdersManagment)(nil).Order), number)
}

// UpdateOrder mocks base method.
func (m *MockOrdersManagment) UpdateOrder(order entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrdersManagmentMockRecorder) UpdateOrder(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrdersManagment)(nil).UpdateOrder), order)
}
